{"version":3,"sources":["index.js"],"names":["Button","props","className","onClick","buttonDisplay","LCDDisplay","solarClass","display","SolarPanel","onMouseOver","onMouseLeave","Calculator","operations","a","b","clear","setState","num1","num2","numDisplay","result","isAwaitingNextNumber","isFloat","currentOperator","history","backspace","state","length","slice","mathOperation","thisOperator","formattedNumDisplay","join","numDisplayFloat","parseFloat","historyObject","concat","finalResult","toString","toExponential","equals","formattedNum1","num1Float","numpad","number","newNumber","clearState","decimal","fadeOutDisplay","console","log","solarState","fadeInDisplay","this","e","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kOAKA,SAASA,EAAOC,GACd,OAAO,qBAAKC,UAAWD,EAAMC,UAAWC,QAASF,EAAME,QAAhD,SAA0DF,EAAMG,gBAGzE,SAASC,EAAWJ,GAClB,OAAO,qBAAKC,UAAU,aAAf,SACL,qBAAKA,UAAWD,EAAMK,WAAtB,SAAmCL,EAAMM,YAI7C,SAASC,EAAWP,GAClB,OAAO,qBAAKC,UAAU,aAAaO,YAAaR,EAAMQ,YAAaC,aAAcT,EAAMS,e,IAOnFC,E,kDACJ,WAAYV,GAAO,IAAD,8BAChB,cAAMA,IAcRW,WAAa,CACX,IAAM,SAACC,EAAGC,GAAQ,OAAOD,EAAIC,GAC7B,IAAM,SAACD,EAAGC,GAAQ,OAAOD,EAAIC,GAC7B,IAAM,SAACD,EAAGC,GAAQ,OAAOD,EAAIC,GAC7B,IAAM,SAACD,EAAGC,GAAQ,OAAOD,EAAIC,IAnBb,EAsBlBC,MAAQ,WACN,EAAKC,SAAS,CACZC,KAAM,GACNC,KAAM,GACNC,WAAW,CAAC,GACZC,OAAQ,GACRC,sBAAsB,EACtBC,SAAS,EACTC,gBAAiB,GACjBC,QAAS,MA/BK,EAmClBC,UAAY,WACV,IAAMN,EAAa,EAAKO,MAAMP,WACxBG,EAAuE,MAA5D,EAAKI,MAAMP,WAAW,EAAKO,MAAMP,WAAWQ,OAAS,IAAqB,EAAKD,MAAMJ,QACtG,EAAKN,SAAS,CACZG,WAAYA,EAAWS,MAAM,EAAGT,EAAWQ,OAAS,GACpDL,QAASA,KAxCK,EA4ClBO,cAAgB,SAACC,GAGf,IAAMC,EAAsB,EAAKL,MAAMP,WAAWa,KAAK,IACjDC,EAAkBC,WAAWH,GAC7BI,EAAgB,CAAEX,QAAS,EAAKE,MAAMF,QAAQY,OAAON,IAE3D,GAAG,EAAKJ,MAAML,qBAEZ,OAAG,EAAKK,MAAMN,OAAOO,QAAU,EACtB,EAAKX,SAAL,aACLO,gBAAiBO,EACjBb,KAAM,CAACgB,GACPZ,sBAAsB,EACtBC,SAAS,EACTF,OAAQ,IACLe,IAKA,EAAKnB,SAAL,aACLO,gBAAiBO,GACdK,IAIP,IAAI,EAAKT,MAAML,qBAAsB,CAEnC,GAAG,EAAKK,MAAMH,gBAAgBI,QAAU,EACtC,OAAO,EAAKX,SAAL,aACLO,gBAAiBO,EACjBb,KAAM,CAACgB,GACPZ,sBAAsB,EACtBC,SAAS,GACNa,IAKP,IAAIE,EAAc,EAAKzB,WAAW,EAAKc,MAAMH,iBAAiB,EAAKG,MAAMT,KAAK,GAAGgB,GAIjF,OAFII,EAAYC,WAAWX,OAAS,IAAIU,EAAcA,EAAYE,cAAc,IAEzE,EAAKvB,SAAL,aACLG,WAAY,CAACkB,GACbpB,KAAM,CAACoB,GACPd,gBAAiBO,EACjBT,sBAAsB,GACnBc,MA7FS,EAkGlBK,OAAS,WACP,IAAML,EAAgB,CAAEX,QAAS,EAAKE,MAAMF,QAAQY,OAAO,MAG3D,GAAG,EAAKV,MAAML,qBAAqB,CAEjC,GAAG,EAAKK,MAAMN,OAAOO,QAAU,EAAG,OAGlC,IAAIU,EAAc,EAAKzB,WAAW,EAAKc,MAAMH,iBAAiB,EAAKG,MAAMN,OAAO,GAAG,EAAKM,MAAMR,KAAK,IAG/FmB,EAAYC,WAAWX,OAAS,IAAIU,EAAcA,EAAYE,cAAc,IAEhF,EAAKvB,SAAL,aACEC,KAAM,EAAKS,MAAMN,OACjBD,WAAY,CAACkB,GACbjB,OAAQ,CAACiB,GACThB,sBAAsB,GACnBc,IAKP,IAAK,EAAKT,MAAML,sBAAwB,EAAKK,MAAMH,gBAAgBI,OAAS,EAAG,CAG7E,IAAMc,EAAgB,EAAKf,MAAMT,KAAKe,KAAK,IACrCU,EAAYR,WAAWO,GAEvBV,EAAsB,EAAKL,MAAMP,WAAWa,KAAK,IACjDC,EAAkBC,WAAWH,GAG/BM,EAAc,EAAKzB,WAAW,EAAKc,MAAMH,iBAAiBmB,EAAUT,GAGpEI,EAAYC,WAAWX,OAAS,IAAIU,EAAcA,EAAYE,cAAc,IAEhF,EAAKvB,SAAL,aACEC,KAAM,CAACyB,GACPxB,KAAM,CAACe,GACPd,WAAY,CAACkB,GACbjB,OAAQ,CAACiB,GACThB,sBAAsB,GACnBc,MA/IS,EAoJlBQ,OAAS,SAACC,GACR,IAAMT,EAAgB,CAAEX,QAAS,EAAKE,MAAMF,QAAQY,OAAOQ,IAGvDC,EAAa,EAAKnB,MAAML,qBAAuB,GAAK,EAAKK,MAAMP,WAC/D2B,EAAa,GAGb,EAAKpB,MAAMP,WAAWQ,QAAU,IAClCkB,EAAYA,EAAUT,OAAOQ,IAI3B,EAAKlB,MAAMN,OAAOO,OAAS,IAC7BmB,EAAa,CACX7B,KAAM,GACNC,KAAM,GACNE,OAAQ,GACRE,SAAS,EACTC,gBAAiB,KAIrB,EAAKP,SAAL,yBACEG,WAAY0B,EACZxB,sBAAsB,GACnByB,GACAX,KA/KW,EAmLlBY,QAAU,WACR,IAAMZ,EAAgB,CAAEX,QAAS,EAAKE,MAAMF,QAAQY,OAAO,MAE3D,IAAI,EAAKV,MAAMJ,WACX,EAAKI,MAAMP,WAAWQ,QAAU,GAGpC,OAAG,EAAKD,MAAML,qBACL,EAAKL,SAAL,aACLG,WAAW,CAAC,KACZG,SAAS,EACTD,sBAAsB,GACnBc,SAIP,EAAKnB,SAAL,aACEG,WAAW,EAAKO,MAAMP,WAAWiB,OAAO,KACxCd,SAAS,GACNa,KAtMW,EA0MlBa,eAAiB,WACfC,QAAQC,IAAI,WACZ,EAAKlC,SAAS,CACZmC,WAAY,cA7ME,EAiNlBC,cAAgB,WACdH,QAAQC,IAAI,WACZ,EAAKlC,SAAS,CACZmC,WAAY,aAlNd,EAAKzB,MAAQ,CACXyB,WAAY,UACZlC,KAAM,GACNC,KAAM,GACNC,WAAY,CAAC,GACbC,OAAQ,GACRC,sBAAsB,EACtBC,SAAS,EACTC,gBAAiB,GACjBC,QAAS,IAXK,E,0CAwNlB,WAAU,IAAD,OACP,OACE,8BACE,sBAAKtB,UAAU,YAAf,UACE,cAACG,EAAD,CAAYE,QAAS8C,KAAK3B,MAAMP,WAAYb,WAAY+C,KAAK3B,MAAMyB,aAEnE,cAAC3C,EAAD,CAAYC,YAAa4C,KAAKL,eAAgBtC,aAAc2C,KAAKD,gBACjE,cAACpD,EAAD,CAAQE,UAAU,kBAAkBE,cAAc,KAAKD,QAASkD,KAAK5B,YACrE,cAACzB,EAAD,CAAQE,UAAU,cAAcE,cAAc,IAAID,QAASkD,KAAKtC,QAChE,cAACf,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,kBAAkBE,cAAc,OAAID,QAAS,SAACmD,GAAD,OAAO,EAAKzB,cAAc,IAAKyB,MAE9F,cAACtD,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,kBAAkBE,cAAc,IAAID,QAAS,SAACmD,GAAD,OAAO,EAAKzB,cAAc,IAAKyB,MAE9F,cAACtD,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,kBAAkBE,cAAc,IAAID,QAAS,SAACmD,GAAD,OAAO,EAAKzB,cAAc,IAAKyB,MAE9F,cAACtD,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAASkD,KAAKN,UAClE,cAAC/C,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAAS,kBAAM,EAAKwC,OAAO,MAC/E,cAAC3C,EAAD,CAAQE,UAAU,gBAAgBE,cAAc,IAAID,QAASkD,KAAKb,SAClE,cAACxC,EAAD,CAAQE,UAAU,kBAAkBE,cAAc,IAAID,QAAS,SAACmD,GAAD,OAAO,EAAKzB,cAAc,IAAKyB,e,GApP/EC,IAAMC,WAgQ/BC,IAASC,OACP,cAAC/C,EAAD,IACAgD,SAASC,eAAe,W","file":"static/js/main.07223604.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Button(props) {\r\n  return <div className={props.className} onClick={props.onClick}>{props.buttonDisplay}</div>\r\n}\r\n\r\nfunction LCDDisplay(props) {\r\n  return <div className=\"lcdDisplay\">\r\n    <div className={props.solarClass}>{props.display}</div>\r\n    </div>\r\n}\r\n\r\nfunction SolarPanel(props) {\r\n  return <div className=\"solarPanel\" onMouseOver={props.onMouseOver} onMouseLeave={props.onMouseLeave}></div>\r\n}\r\n\r\n// function History(props) {\r\n//   return <div className={props.className}>{props.history}</div>\r\n// }\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      solarState: 'powerOn',\r\n      num1: [],\r\n      num2: [],\r\n      numDisplay: [0],      \r\n      result: [], // Updated when equals is pressed.\r\n      isAwaitingNextNumber: true, // When true, a new number is built in the display. Also used for various conditionals.\r\n      isFloat: false, // Number contains a decimal.\r\n      currentOperator: '',  // The arithmetic operation to be performed.\r\n      history: [] // Accumulated button presses until \"Clear\" is pressed\r\n    }\r\n  }\r\n\r\n  operations = {\r\n    '*' : (a, b) => { return a * b },\r\n    '/' : (a, b) => { return a / b },\r\n    '+' : (a, b) => { return a + b },\r\n    '-' : (a, b) => { return a - b }\r\n  }\r\n\r\n  clear = () => {\r\n    this.setState({\r\n      num1: [],\r\n      num2: [],\r\n      numDisplay:[0],      \r\n      result: [],\r\n      isAwaitingNextNumber: true,\r\n      isFloat: false,\r\n      currentOperator: '',\r\n      history: []\r\n    })\r\n  }\r\n\r\n  backspace = () => {\r\n    const numDisplay = this.state.numDisplay\r\n    const isFloat = (this.state.numDisplay[this.state.numDisplay.length - 1] === '.' ? false : this.state.isFloat)\r\n    this.setState({\r\n      numDisplay: numDisplay.slice(0, numDisplay.length - 1),\r\n      isFloat: isFloat\r\n    })\r\n  }\r\n\r\n  mathOperation = (thisOperator) => {\r\n    // Join array of numbers together to make a single string of numbers.  \r\n    // Then use parseFloat() to convert it from a string to a real integer/float number.\r\n    const formattedNumDisplay = this.state.numDisplay.join('')\r\n    const numDisplayFloat = parseFloat(formattedNumDisplay)\r\n    const historyObject = { history: this.state.history.concat(thisOperator) }\r\n\r\n    if(this.state.isAwaitingNextNumber) {\r\n      // Handle when operator is pressed after equals\r\n      if(this.state.result.length >= 1){\r\n        return this.setState({\r\n          currentOperator: thisOperator,\r\n          num1: [numDisplayFloat],\r\n          isAwaitingNextNumber: true,\r\n          isFloat: false,\r\n          result: [],\r\n          ...historyObject\r\n        })\r\n      }\r\n\r\n      // Only update this.state.operator if previous pressed button was an operator\r\n      return this.setState({\r\n        currentOperator: thisOperator,\r\n        ...historyObject\r\n      })\r\n    }\r\n\r\n    if(!this.state.isAwaitingNextNumber) {\r\n      // Handle first time pressing operator button\r\n      if(this.state.currentOperator.length <= 0) {\r\n        return this.setState({\r\n          currentOperator: thisOperator,\r\n          num1: [numDisplayFloat],\r\n          isAwaitingNextNumber: true,\r\n          isFloat: false,\r\n          ...historyObject\r\n        })\r\n      }\r\n\r\n      // Calculate previous operation and prepare for next incoming number\r\n      let finalResult = this.operations[this.state.currentOperator](this.state.num1[0],numDisplayFloat)\r\n\r\n      if (finalResult.toString().length > 8 ) finalResult = finalResult.toExponential(8)\r\n\r\n      return this.setState({\r\n        numDisplay: [finalResult],\r\n        num1: [finalResult],\r\n        currentOperator: thisOperator,\r\n        isAwaitingNextNumber: true,\r\n        ...historyObject\r\n      })\r\n    }\r\n  }\r\n\r\n  equals = () => {\r\n    const historyObject = { history: this.state.history.concat('=') }\r\n\r\n    // Handle when equals button is pressed consecutively\r\n    if(this.state.isAwaitingNextNumber){\r\n      // When operator button was the last button, prevent equals button from executing\r\n      if(this.state.result.length <= 0) return\r\n\r\n      // Calculate answer\r\n      let finalResult = this.operations[this.state.currentOperator](this.state.result[0],this.state.num2[0])\r\n      \r\n      // If answer is longing than 8 characters, convert to exponential as truncation\r\n      if (finalResult.toString().length > 8 ) finalResult = finalResult.toExponential(8)\r\n\r\n      this.setState({\r\n        num1: this.state.result,\r\n        numDisplay: [finalResult],\r\n        result: [finalResult],\r\n        isAwaitingNextNumber: true,\r\n        ...historyObject\r\n      })\r\n    }\r\n\r\n    // Handle first equals button press\r\n    if (!this.state.isAwaitingNextNumber && this.state.currentOperator.length > 0) {\r\n\r\n      // Join array of numbers together to make a single string of numbers.  Then use parseFloat() to make it a real integer/float number.\r\n      const formattedNum1 = this.state.num1.join('')\r\n      const num1Float = parseFloat(formattedNum1)\r\n\r\n      const formattedNumDisplay = this.state.numDisplay.join('')\r\n      const numDisplayFloat = parseFloat(formattedNumDisplay)\r\n\r\n      // Calculate answer\r\n      let finalResult = this.operations[this.state.currentOperator](num1Float,numDisplayFloat)\r\n      \r\n      // If answer is longing than 8 characters, convert to exponential as truncation\r\n      if (finalResult.toString().length > 8 ) finalResult = finalResult.toExponential(8)\r\n\r\n      this.setState({\r\n        num1: [num1Float],\r\n        num2: [numDisplayFloat],\r\n        numDisplay: [finalResult],\r\n        result: [finalResult],\r\n        isAwaitingNextNumber: true,\r\n        ...historyObject\r\n      })\r\n    }\r\n  }\r\n\r\n  numpad = (number) => {\r\n    const historyObject = { history: this.state.history.concat(number) }\r\n    // If a non-number was previously pressed, start concatenating a new set of numbers.  \r\n    //Otherwise, concatenate to what's in the display.\r\n    let newNumber = (this.state.isAwaitingNextNumber ? [] : this.state.numDisplay)\r\n    let clearState = {}\r\n\r\n    // Limit input to 8 digits\r\n    if (this.state.numDisplay.length <= 8) {\r\n      newNumber = newNumber.concat(number)\r\n    }\r\n\r\n    // If equals button was previously pressed, clear all state.\r\n    if (this.state.result.length > 0) {\r\n      clearState = {\r\n        num1: [],\r\n        num2: [],\r\n        result: [],\r\n        isFloat: false,\r\n        currentOperator: ''\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      numDisplay: newNumber,\r\n      isAwaitingNextNumber: false,\r\n      ...clearState,\r\n      ...historyObject\r\n    })   \r\n  }\r\n\r\n  decimal = () => {\r\n    const historyObject = { history: this.state.history.concat('.') }\r\n    // If decimal was pressed once for current number, return immediately. Effectively disables decimal button.\r\n    if (this.state.isFloat) return\r\n    if (this.state.numDisplay.length >= 8) return\r\n    \r\n    // Start next number with a decimal if operator button was previously pressed.\r\n    if(this.state.isAwaitingNextNumber) {\r\n      return this.setState({\r\n        numDisplay:['.'],\r\n        isFloat: true,\r\n        isAwaitingNextNumber: false,\r\n        ...historyObject\r\n      })      \r\n    }\r\n\r\n    this.setState({\r\n      numDisplay:this.state.numDisplay.concat('.'),       \r\n      isFloat: true,\r\n      ...historyObject\r\n    })\r\n  }\r\n\r\n  fadeOutDisplay = () => {\r\n    console.log('entered')\r\n    this.setState({\r\n      solarState: 'powerOff'\r\n    })\r\n  }\r\n\r\n  fadeInDisplay = () => {\r\n    console.log('entered')\r\n    this.setState({\r\n      solarState: 'powerOn'\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <LCDDisplay display={this.state.numDisplay} solarClass={this.state.solarState}/>\r\n\r\n          <SolarPanel onMouseOver={this.fadeOutDisplay} onMouseLeave={this.fadeInDisplay} />\r\n          <Button className=\"buttonBackspace\" buttonDisplay=\"<X\" onClick={this.backspace}/>\r\n          <Button className=\"buttonClear\" buttonDisplay=\"C\" onClick={this.clear}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"1\" onClick={() => this.numpad(1)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"2\" onClick={() => this.numpad(2)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"3\" onClick={() => this.numpad(3)}/>\r\n          <Button className=\"buttonSecondary\" buttonDisplay=\"÷\" onClick={(e) => this.mathOperation('/', e)}/>\r\n\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"4\" onClick={() => this.numpad(4)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"5\" onClick={() => this.numpad(5)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"6\" onClick={() => this.numpad(6)}/>\r\n          <Button className=\"buttonSecondary\" buttonDisplay=\"x\" onClick={(e) => this.mathOperation('*', e)}/>\r\n\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"7\" onClick={() => this.numpad(7)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"8\" onClick={() => this.numpad(8)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"9\" onClick={() => this.numpad(9)}/>\r\n          <Button className=\"buttonSecondary\" buttonDisplay=\"-\" onClick={(e) => this.mathOperation('-', e)}/>\r\n\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\".\" onClick={this.decimal}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"0\" onClick={() => this.numpad(0)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"=\" onClick={this.equals}/>\r\n          <Button className=\"buttonSecondary\" buttonDisplay=\"+\" onClick={(e) => this.mathOperation('+', e)}/>        \r\n        </div>\r\n        {/* <br />\r\n        <History className=\"history\" history={this.state.history} /> */}\r\n      </div>\r\n      \r\n    )\r\n  }  \r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Calculator />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}