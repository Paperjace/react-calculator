{"version":3,"sources":["index.js"],"names":["Button","props","className","onClick","buttonDisplay","LCDDisplay","display","Calculator","operations","a","b","clear","setState","num1","num2","numDisplay","result","isAwaitingNextNumber","isFloat","currentOperator","mathOperation","thisOperator","formattedNumDisplay","state","join","numDisplayFloat","parseFloat","length","finalResult","toString","toExponential","equals","formattedNum1","num1Float","numpad","number","newNumber","clearState","concat","console","log","decimal","this","e","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7e20c8d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Button(props) {\r\n  return <div className={props.className} onClick={props.onClick}>{props.buttonDisplay}</div>\r\n}\r\n\r\nfunction LCDDisplay(props) {\r\n  return <div className=\"lcdDisplay\">{props.display}</div>  \r\n}\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      num1: [],\r\n      num2: [],\r\n      numDisplay: [0],      \r\n      result: [], // Updated when equals is pressed.\r\n      isAwaitingNextNumber: true, // When true, a new number is built in the display. Also used for various conditionals.\r\n      isFloat: false, // Number contains a decimal.\r\n      currentOperator: '' // The arithmetic operation to be performed.\r\n    }\r\n  }\r\n\r\n  operations = {\r\n    '*' : (a, b) => { return a * b },\r\n    '/' : (a, b) => { return a / b },\r\n    '+' : (a, b) => { return a + b },\r\n    '-' : (a, b) => { return a - b }\r\n  }\r\n\r\n  clear = () => {\r\n    this.setState({\r\n      num1: [],\r\n      num2: [],\r\n      numDisplay:[0],      \r\n      result: [],\r\n      isAwaitingNextNumber: true,\r\n      isFloat: false,\r\n      currentOperator: ''\r\n    })\r\n  }\r\n\r\n  mathOperation = (thisOperator) => {\r\n    // Join array of numbers together to make a single string of numbers.  Then use parseFloat() to make it a real integer/float number.\r\n    const formattedNumDisplay = this.state.numDisplay.join('')\r\n    const numDisplayFloat = parseFloat(formattedNumDisplay)\r\n\r\n    // Only update this.state.operator if previous pressed button was an operator\r\n    if(this.state.isAwaitingNextNumber) {\r\n      return this.setState({\r\n        currentOperator: thisOperator\r\n      })\r\n    }\r\n\r\n    // Handle first time pressing operator button\r\n    if(!this.state.isAwaitingNextNumber && this.state.currentOperator.length <= 0){\r\n      return this.setState({\r\n        currentOperator: thisOperator,\r\n        num1: [numDisplayFloat],\r\n        isAwaitingNextNumber: true,\r\n        isFloat: false\r\n      })\r\n    }\r\n\r\n    // Calculate previous operation and prepare for next incoming number\r\n    if(!this.state.isAwaitingNextNumber) {\r\n      let finalResult = this.operations[this.state.currentOperator](this.state.num1[0],numDisplayFloat)\r\n\r\n      if (finalResult.toString().length > 8 ) finalResult = finalResult.toExponential(8)\r\n\r\n      return this.setState({\r\n        numDisplay: [finalResult],\r\n        num1: [finalResult],\r\n        currentOperator: thisOperator,\r\n        isAwaitingNextNumber: true\r\n      })\r\n    }\r\n  }\r\n\r\n  equals = () => {\r\n    // Handle when equals button is pressed consecutively\r\n    if(this.state.isAwaitingNextNumber){\r\n      // When operator button was the last button, prevent equals button from executing\r\n      if(this.state.result.length <= 0) return\r\n\r\n      // Calculate answer\r\n      let finalResult = this.operations[this.state.currentOperator](this.state.result,this.state.num2)\r\n      \r\n      // If answer is longing than 8 characters, convert to exponential as truncation\r\n      if (finalResult.toString().length > 8 ) finalResult = finalResult.toExponential(8)\r\n\r\n      this.setState({\r\n        num1: this.state.result,\r\n        numDisplay: [finalResult],\r\n        result: [finalResult],\r\n        isAwaitingNextNumber: true\r\n      })\r\n    }\r\n\r\n    // Handle first equals button press\r\n    if (!this.state.isAwaitingNextNumber && this.state.currentOperator.length > 0) {\r\n\r\n      // Join array of numbers together to make a single string of numbers.  Then use parseFloat() to make it a real integer/float number.\r\n      const formattedNum1 = this.state.num1.join('')\r\n      const num1Float = parseFloat(formattedNum1)\r\n\r\n      const formattedNumDisplay = this.state.numDisplay.join('')\r\n      const numDisplayFloat = parseFloat(formattedNumDisplay)\r\n\r\n      // Calculate answer\r\n      let finalResult = this.operations[this.state.currentOperator](num1Float,numDisplayFloat)\r\n      \r\n      // If answer is longing than 8 characters, convert to exponential as truncation\r\n      if (finalResult.toString().length > 8 ) finalResult = finalResult.toExponential(8)\r\n\r\n      this.setState({\r\n        num1: [num1Float],\r\n        num2: [numDisplayFloat],\r\n        numDisplay: [finalResult],\r\n        result: [finalResult],\r\n        isAwaitingNextNumber: true\r\n      })\r\n    }\r\n  }\r\n\r\n  numpad = (number) => {\r\n    let newNumber\r\n    let clearState = {}\r\n\r\n    // If a non-number was previously pressed, start concatenating a new set of numbers.  Otherwise, concatenate to what's in the display.\r\n    if (this.state.isAwaitingNextNumber) {\r\n      newNumber = []\r\n    } else {\r\n      newNumber = this.state.numDisplay\r\n    }\r\n    \r\n    // Limit input to 8 digits\r\n    if (this.state.numDisplay.length <= 8) {\r\n      newNumber = newNumber.concat(number)\r\n    }\r\n\r\n    // If equals button was previously pressed, clear all state.\r\n    if (this.state.result.length > 0) {\r\n      console.log(this.state.result.length)\r\n      clearState = {\r\n        num1: [],\r\n        num2: [],\r\n        result: [],\r\n        isFloat: false,\r\n        currentOperator: ''\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      numDisplay: newNumber,\r\n      isAwaitingNextNumber: false,\r\n      ...clearState\r\n    })   \r\n  }\r\n\r\n  decimal = () => {\r\n    // If decimal was pressed once for current number, return immediately. Effectively disables decimal button.\r\n    if (this.state.isFloat) return \r\n    \r\n    // Start next number with a decimal if operator button was previously pressed.\r\n    if(this.state.isAwaitingNextNumber) {\r\n      return this.setState({\r\n        numDisplay:['.'],\r\n        isFloat: true,\r\n        isAwaitingNextNumber: false\r\n      })      \r\n    }\r\n\r\n    this.setState({\r\n      numDisplay:this.state.numDisplay.concat('.'),       \r\n      isFloat: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <LCDDisplay display={this.state.numDisplay}/>\r\n\r\n        <Button className=\"buttonClear\" buttonDisplay=\"clear\" onClick={this.clear}/>\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"1\" onClick={() => this.numpad(1)}/>\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"2\" onClick={() => this.numpad(2)}/>\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"3\" onClick={() => this.numpad(3)}/>\r\n        <Button className=\"buttonSecondary\" buttonDisplay=\"÷\" onClick={(e) => this.mathOperation('/', e)}/>\r\n\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"4\" onClick={() => this.numpad(4)}/>\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"5\" onClick={() => this.numpad(5)}/>\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"6\" onClick={() => this.numpad(6)}/>\r\n        <Button className=\"buttonSecondary\" buttonDisplay=\"x\" onClick={(e) => this.mathOperation('*', e)}/>\r\n\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"7\" onClick={() => this.numpad(7)}/>\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"8\" onClick={() => this.numpad(8)}/>\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"9\" onClick={() => this.numpad(9)}/>\r\n        <Button className=\"buttonSecondary\" buttonDisplay=\"-\" onClick={(e) => this.mathOperation('-', e)}/>\r\n\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\".\" onClick={this.decimal}/>\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"0\" onClick={() => this.numpad(0)}/>\r\n        <Button className=\"buttonPrimary\" buttonDisplay=\"=\" onClick={this.equals}/>\r\n        <Button className=\"buttonSecondary\" buttonDisplay=\"+\" onClick={(e) => this.mathOperation('+', e)}/>        \r\n      </div>\r\n    )\r\n  }  \r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Calculator />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}