{"version":3,"sources":["index.js"],"names":["Button","props","className","onClick","buttonDisplay","LCDDisplay","display","History","history","Calculator","operations","a","b","clear","setState","num1","num2","numDisplay","result","isAwaitingNextNumber","isFloat","currentOperator","mathOperation","thisOperator","formattedNumDisplay","state","join","numDisplayFloat","parseFloat","historyObject","concat","length","finalResult","toString","toExponential","equals","formattedNum1","num1Float","numpad","number","newNumber","clearState","decimal","this","e","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96aba4d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Button(props) {\r\n  return <div className={props.className} onClick={props.onClick}>{props.buttonDisplay}</div>\r\n}\r\n\r\nfunction LCDDisplay(props) {\r\n  return <div className=\"lcdDisplay\">{props.display}</div>  \r\n}\r\n\r\nfunction History(props) {\r\n  return <div className={props.className}>{props.history}</div>\r\n}\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      num1: [],\r\n      num2: [],\r\n      numDisplay: [0],      \r\n      result: [], // Updated when equals is pressed.\r\n      isAwaitingNextNumber: true, // When true, a new number is built in the display. Also used for various conditionals.\r\n      isFloat: false, // Number contains a decimal.\r\n      currentOperator: '',  // The arithmetic operation to be performed.\r\n      history: [] // Accumulated button presses until \"Clear\" is pressed\r\n    }\r\n  }\r\n\r\n  operations = {\r\n    '*' : (a, b) => { return a * b },\r\n    '/' : (a, b) => { return a / b },\r\n    '+' : (a, b) => { return a + b },\r\n    '-' : (a, b) => { return a - b }\r\n  }\r\n\r\n  clear = () => {\r\n    this.setState({\r\n      num1: [],\r\n      num2: [],\r\n      numDisplay:[0],      \r\n      result: [],\r\n      isAwaitingNextNumber: true,\r\n      isFloat: false,\r\n      currentOperator: '',\r\n      history: []\r\n    })\r\n  }\r\n\r\n  mathOperation = (thisOperator) => {\r\n    // Join array of numbers together to make a single string of numbers.  \r\n    // Then use parseFloat() to convert it from a string to a real integer/float number.\r\n    const formattedNumDisplay = this.state.numDisplay.join('')\r\n    const numDisplayFloat = parseFloat(formattedNumDisplay)\r\n    const historyObject = { history: this.state.history.concat(thisOperator) }\r\n\r\n    if(this.state.isAwaitingNextNumber) {\r\n      // Handle when operator is pressed after equals\r\n      if(this.state.result.length >= 1){\r\n        return this.setState({\r\n          currentOperator: thisOperator,\r\n          num1: [numDisplayFloat],\r\n          isAwaitingNextNumber: true,\r\n          isFloat: false,\r\n          result: [],\r\n          ...historyObject\r\n        })\r\n      }\r\n\r\n      // Only update this.state.operator if previous pressed button was an operator\r\n      return this.setState({\r\n        currentOperator: thisOperator,\r\n        ...historyObject\r\n      })\r\n    }\r\n\r\n    if(!this.state.isAwaitingNextNumber) {\r\n      // Handle first time pressing operator button\r\n      if(this.state.currentOperator.length <= 0) {\r\n        return this.setState({\r\n          currentOperator: thisOperator,\r\n          num1: [numDisplayFloat],\r\n          isAwaitingNextNumber: true,\r\n          isFloat: false,\r\n          ...historyObject\r\n        })\r\n      }\r\n\r\n      // Calculate previous operation and prepare for next incoming number\r\n      let finalResult = this.operations[this.state.currentOperator](this.state.num1[0],numDisplayFloat)\r\n\r\n      if (finalResult.toString().length > 8 ) finalResult = finalResult.toExponential(8)\r\n\r\n      return this.setState({\r\n        numDisplay: [finalResult],\r\n        num1: [finalResult],\r\n        currentOperator: thisOperator,\r\n        isAwaitingNextNumber: true,\r\n        ...historyObject\r\n      })\r\n    }\r\n  }\r\n\r\n  equals = () => {\r\n    const historyObject = { history: this.state.history.concat('=') }\r\n\r\n    // Handle when equals button is pressed consecutively\r\n    if(this.state.isAwaitingNextNumber){\r\n      // When operator button was the last button, prevent equals button from executing\r\n      if(this.state.result.length <= 0) return\r\n\r\n      // Calculate answer\r\n      let finalResult = this.operations[this.state.currentOperator](this.state.result[0],this.state.num2[0])\r\n      \r\n      // If answer is longing than 8 characters, convert to exponential as truncation\r\n      if (finalResult.toString().length > 8 ) finalResult = finalResult.toExponential(8)\r\n\r\n      this.setState({\r\n        num1: this.state.result,\r\n        numDisplay: [finalResult],\r\n        result: [finalResult],\r\n        isAwaitingNextNumber: true,\r\n        ...historyObject\r\n      })\r\n    }\r\n\r\n    // Handle first equals button press\r\n    if (!this.state.isAwaitingNextNumber && this.state.currentOperator.length > 0) {\r\n\r\n      // Join array of numbers together to make a single string of numbers.  Then use parseFloat() to make it a real integer/float number.\r\n      const formattedNum1 = this.state.num1.join('')\r\n      const num1Float = parseFloat(formattedNum1)\r\n\r\n      const formattedNumDisplay = this.state.numDisplay.join('')\r\n      const numDisplayFloat = parseFloat(formattedNumDisplay)\r\n\r\n      // Calculate answer\r\n      let finalResult = this.operations[this.state.currentOperator](num1Float,numDisplayFloat)\r\n      \r\n      // If answer is longing than 8 characters, convert to exponential as truncation\r\n      if (finalResult.toString().length > 8 ) finalResult = finalResult.toExponential(8)\r\n\r\n      this.setState({\r\n        num1: [num1Float],\r\n        num2: [numDisplayFloat],\r\n        numDisplay: [finalResult],\r\n        result: [finalResult],\r\n        isAwaitingNextNumber: true,\r\n        ...historyObject\r\n      })\r\n    }\r\n  }\r\n\r\n  numpad = (number) => {\r\n    const historyObject = { history: this.state.history.concat(number) }\r\n    // If a non-number was previously pressed, start concatenating a new set of numbers.  \r\n    //Otherwise, concatenate to what's in the display.\r\n    let newNumber = (this.state.isAwaitingNextNumber ? [] : this.state.numDisplay)\r\n    let clearState = {}\r\n\r\n    // Limit input to 8 digits\r\n    if (this.state.numDisplay.length <= 8) {\r\n      newNumber = newNumber.concat(number)\r\n    }\r\n\r\n    // If equals button was previously pressed, clear all state.\r\n    if (this.state.result.length > 0) {\r\n      clearState = {\r\n        num1: [],\r\n        num2: [],\r\n        result: [],\r\n        isFloat: false,\r\n        currentOperator: ''\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      numDisplay: newNumber,\r\n      isAwaitingNextNumber: false,\r\n      ...clearState,\r\n      ...historyObject\r\n    })   \r\n  }\r\n\r\n  decimal = () => {\r\n    const historyObject = { history: this.state.history.concat('.') }\r\n    // If decimal was pressed once for current number, return immediately. Effectively disables decimal button.\r\n    if (this.state.isFloat) return\r\n    if (this.state.numDisplay.length >= 8) return\r\n    \r\n    // Start next number with a decimal if operator button was previously pressed.\r\n    if(this.state.isAwaitingNextNumber) {\r\n      return this.setState({\r\n        numDisplay:['.'],\r\n        isFloat: true,\r\n        isAwaitingNextNumber: false,\r\n        ...historyObject\r\n      })      \r\n    }\r\n\r\n    this.setState({\r\n      numDisplay:this.state.numDisplay.concat('.'),       \r\n      isFloat: true,\r\n      ...historyObject\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <LCDDisplay display={this.state.numDisplay}/>\r\n\r\n          <Button className=\"buttonClear\" buttonDisplay=\"clear\" onClick={this.clear}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"1\" onClick={() => this.numpad(1)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"2\" onClick={() => this.numpad(2)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"3\" onClick={() => this.numpad(3)}/>\r\n          <Button className=\"buttonSecondary\" buttonDisplay=\"÷\" onClick={(e) => this.mathOperation('/', e)}/>\r\n\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"4\" onClick={() => this.numpad(4)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"5\" onClick={() => this.numpad(5)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"6\" onClick={() => this.numpad(6)}/>\r\n          <Button className=\"buttonSecondary\" buttonDisplay=\"x\" onClick={(e) => this.mathOperation('*', e)}/>\r\n\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"7\" onClick={() => this.numpad(7)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"8\" onClick={() => this.numpad(8)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"9\" onClick={() => this.numpad(9)}/>\r\n          <Button className=\"buttonSecondary\" buttonDisplay=\"-\" onClick={(e) => this.mathOperation('-', e)}/>\r\n\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\".\" onClick={this.decimal}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"0\" onClick={() => this.numpad(0)}/>\r\n          <Button className=\"buttonPrimary\" buttonDisplay=\"=\" onClick={this.equals}/>\r\n          <Button className=\"buttonSecondary\" buttonDisplay=\"+\" onClick={(e) => this.mathOperation('+', e)}/>        \r\n        </div>\r\n        <br />\r\n        <History className=\"history\" history={this.state.history} />\r\n      </div>\r\n      \r\n    )\r\n  }  \r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Calculator />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}